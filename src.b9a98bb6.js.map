{"version":3,"sources":["gtihub-api.ts","metadata.ts","url.ts","embedder.ts","escape.ts","index.ts"],"names":[],"mappings":"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","file":"src.b9a98bb6.js","sourceRoot":"../src","sourcesContent":["import { PathSpec } from \"./types\";\n\nexport function fetchFile(pathSpec: PathSpec, fileName:string) {\n    return fetch(\n      `https://api.github.com/repos/${pathSpec.user}/${pathSpec.repo}/contents/${pathSpec.path}/${fileName}`,\n      {\n        headers: {\n          'Accept': 'application/vnd.github.v3+json'\n        }\n      }\n    )\n      .then(r => r.json())\n      .then(r => atob(r.content))\n  }","export const metadata = {}","import { PathSpec } from \"./types\";\n\nexport function isAbsoluteUrl(url: string) {\n    var r = new RegExp('^(?:[a-z]+:)?//', 'i');\n    return r.test(url);\n}\n\nexport function parseHash (locationHash: string): PathSpec {\n    const [ user, repo, ...path ] = locationHash.slice(1).split(/\\//g);\n    return { user, repo, path: path.join('/') };\n}","import { fetchFile } from \"./gtihub-api\";\nimport { metadata } from \"./metadata\";\nimport { PathSpec } from \"./types\";\nimport { isAbsoluteUrl } from \"./url\";\n\nfunction embedResource(el: HTMLElement, mime: string, src: string, pathSpec: PathSpec) {\n    const parts = src.split(/\\//g);\n    const path = parts.slice(0, -1);\n    const fileName = parts.slice(-1)[0];\n\n    return fetchFile(\n      {\n        ...pathSpec,\n        path: [pathSpec.path].concat(path).join('/')\n      }, \n      fileName\n    )\n      .then(file => {\n        if (!metadata['scripts']) {\n            metadata['scripts'] = {}\n        }\n        if (path.filter(p => p !== '.').length === 0) {\n            if (!metadata[mime]) {\n                metadata[mime] = {}\n            }\n            metadata[mime][fileName] = file; \n        }\n        el.setAttribute('src', `data:${mime};base64,${btoa(file)}`);\n      })\n}\n  \nexport function embedAllReferences(htmlText: string, pathSpec: PathSpec) {\n    const parser = new DOMParser();\n    const htmlDoc = parser.parseFromString(htmlText, 'text/html');\n    const promises = [];\n    \n    const titleEl = htmlDoc.querySelector('title');\n    metadata['title'] = titleEl ? titleEl.textContent : '';\n\n    const descriptionMeta = htmlDoc.querySelector('meta[name=\"description\"]');\n    metadata['description'] = descriptionMeta ? descriptionMeta.getAttribute('content') : '';\n\n    htmlDoc.querySelectorAll('script').forEach(el => {\n      const src = el.getAttribute('src');\n      if (src && !isAbsoluteUrl(src)) {\n        promises.push(embedResource(el, 'text/javascript', src, pathSpec))\n      }\n    })\n    return Promise.all(promises)\n      .then(() => htmlDoc.documentElement.outerHTML)\n  }","export function esc(html:string) {\n    return html\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}","import { embedAllReferences } from \"./embedder\";\nimport { esc } from \"./escape\";\nimport { fetchFile } from \"./gtihub-api\";\nimport { metadata } from \"./metadata\";\nimport { parseHash } from \"./url\";\n\nfunction createPreview(indexHtml:string) {\n  const div = document.createElement('div');\n    div.innerHTML = `<iframe\n      width=\"1100\"\n      height=\"600\"\n      frameBorder=\"0\"\n      src=\"data:text/html;base64,${btoa(indexHtml)}\"\n    ></iframe>`;\n  \n    return div;\n}\n\nconst pathSpec = parseHash(window.location.hash);\n\nfetchFile(pathSpec, 'index.html')\n  .then(indexHtml => {\n    metadata['index.html'] = indexHtml;\n    return embedAllReferences(indexHtml, pathSpec);\n  })\n  .then(processedIndexHtml => {\n    if (metadata['title']) {\n      const h1 = document.createElement('h1');\n      h1.textContent = metadata['title'];\n      document.body.appendChild(h1);\n      document.title = 'vw: ' + metadata['title'];\n    }\n    if (metadata['description']) {\n      const title = document.createElement('p');\n      title.textContent = metadata['description'];\n      document.body.appendChild(title);\n    }\n\n    document.body.appendChild(createPreview(processedIndexHtml));\n\n    const div = document.createElement('div');\n    div.classList.add('file');\n    div.innerHTML = `<label>index.html</label>\n      <pre><code class=\"language-html\">${esc(metadata['index.html'])}</code></pre>`\n    document.body.appendChild(div);\n\n    for (const scriptName in metadata['text/javascript']) {\n      const scriptContent = metadata['text/javascript'][scriptName];\n      const div = document.createElement('div');\n      div.classList.add('file');\n      div.innerHTML = `<label>${scriptName}</label>\n        <pre><code class=\"language-javascript\">${esc(scriptContent)}</code></pre>`\n      document.body.appendChild(div);\n    }\n\n    (window as any).hljs.highlightAll();\n  })\n"]}